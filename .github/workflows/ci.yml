name: CI Pipeline

on:
  push:
    branches:
      - main  # Trigger this workflow when pushing to the 'main' branch
  pull_request:
    branches:
      - main  # Trigger when creating PRs to 'main' branch

jobs:
  # Job 1: Check Flask Python script
  test_flask_script:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      # Install dependencies (assuming requirements.txt exists)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # Run Python script test (Assuming 'script.py' is the file you want to test)
      - name: Run Flask API Test
        run: |
          python script.py  # Replace with your testing command or tests

  # Job 2: Build Docker Image and Push to DockerHub
  build_and_push_docker_image:
    runs-on: ubuntu-latest
    needs: test_flask_script  # Run only if the test_flask_script job passes
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      # Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      # Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Store in GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }}  # Store in GitHub Secrets
        
      # Build and push Docker image
      - name: Build and Push Docker image
        run: |
          docker build -t yourdockerhubusername/your-image-name:latest .
          docker push yourdockerhubusername/your-image-name:latest

  # Job 3: Check HTML file and Copy to Deployment Folder
  check_and_copy_html:
    runs-on: ubuntu-latest
    needs: test_flask_script  # Run only if the test_flask_script job passes
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Install any dependencies needed for HTML checking (e.g., linters)
      - name: Install HTML Linter
        run: |
          sudo apt-get install -y htmlhint  # Example for HTML linting

      # Run HTML check (you can replace this with a custom script if necessary)
      - name: Check HTML file
        run: |
          htmlhint path/to/your/file.html

      # If HTML check is successful, copy to the deployment folder
      - name: Copy HTML file for deployment
        run: |
          cp path/to/your/file.html path/to/deployment/folder/  # Replace with actual paths
          
      # Commit and push the changes to the repository
      - name: Commit HTML changes
        run: |
          git config --global user.name "Your Name"
          git config --global user.email "youremail@example.com"
          git add .
          git commit -m "Update HTML file for deployment"
          git push
